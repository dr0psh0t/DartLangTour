Enumerated types, often called enumerations or enums, are a special kind of class used to represent a fixed number of constant values.

Note: All enums automatically extend the Enum class. They are also sealed, meaning they cannot be subclassed, implemented, mixed in, or otherwise explicitly instantiated.

Abstract classes and mixins can explicitly implement or extend Enum, but unless they are then implemented by or mixed into an enum declaration, no objects can actually implement the type of that class or mixin.
Declaring simple enums

To declare a simple enumerated type, use the enum keyword and list the values you want to be enumerated:

enum Color { red, green, blue }

Tip: You can also use trailing commas when declaring an enumerated type to help prevent copy-paste errors.
Declaring enhanced enums

Dart also allows enum declarations to declare classes with fields, methods, and const constructors which are limited to a fixed number of known constant instances.

To declare an enhanced enum, follow a syntax similar to normal classes, but with a few extra requirements:

    Instance variables must be final, including those added by mixins.
    All generative constructors must be constant.
    Factory constructors can only return one of the fixed, known enum instances.
    No other class can be extended as Enum is automatically extended.
    There cannot be overrides for index, hashCode, the equality operator ==.
    A member named values cannot be declared in an enum, as it would conflict with the automatically generated static values getter.
    All instances of the enum must be declared in the beginning of the declaration, and there must be at least one instance declared.
